[23/05/21]

[복습]
window main 함수가 호출 되고 나서 
다양한 초기작업을 해줬다.

반복문을 돌면서 메세지들을 받아 처리하는 
메세지 반응형 동작을 했다.

실습으로 WM_PAINT 메세지 작업을 해보았다.
WM_PAINT는 화면에 무엇인가를 그려주는 작업을 한다.

---

윈도우에 무효화 영역이 발생했을 때 
WM_PAINT 메세지를 발생시킨다.

무효화(invalidate) 영역
- 인터넷에서의 정의 : 
( 참고 : http://www.soen.kr/lecture/win32api/lec4/lec4-1-2.htm )
A라는 윈도우가 B라는 윈도우로 가려진 경우
A에는 가려져서 안보이는 영역이 생긴다.
가려져 있다가 A 윈도우가 다시 제일 위로 올라오는 경우
WM_PAINT 메세지가 발생하여 가려져 있던 영역을 다시 그려준다.
- 실제 :
위의 글은 틀린말은 아니지만 너무 옛날 글이다.
때문에 지금은 저렇게 동작하지 않는다.
지금은 창이 가려졌다가 다시 보인다고 해서 WM_PAINT 메세지가 발생하지 않는다.
(* 인터넷의 글을 맹목적으로 믿지마라, 꼭 직접 테스트 해봐라 )

---

[switch-casea문]
switch-case문은 if-else문과 비슷하다.
case문 내에서 지역변수를 만들어주고자 한다면 중괄호를 사용해줘야 한다.

---

[윈도우 핸들]
윈도우는 OS만든 사람이 설계한 것이다.
(Windows OS 개발자 : 
    우리 운영체제에선 윈도우(창)이라는 걸 만들어서 화면상에 정보를 표시할 수 있다)
윈도우는 운영체제에서 관리하는 객체이기에 User가 직접 접근하거나 
    내부 인터페이스가 어떻게 구성되어 있는지 알 수 없다.
OS가 관리하는 커널 오브젝트들은 ID값을 가지고 있다.
User는 제공받은 ID값을 통해서 오브젝트를 다룰 수 있다.
Windows에서 제공하는 Window(창) ID값을 '윈도우 핸들'이라 한다.
HWND : 윈도우 핸들 데이터 타입
User는 메모리에 직접 접근하여 창을 관리하는게 아니라 제공받은 ID값을 통해
    OS 개발자가 제공해주는 함수를 사용하여 창을 관리한다.

그 외의 ID값 종류 : HWND, HDC, HPEN, HBRUSH, etc...
ID값의 특징 : 대부분 구조체명이 'H'로 시작한다.
다양한 ID값을 사용하는 이유: 
    윈도우 핸들의 종류를 나눠 줌으로써 실수를 방지할 수 있다.

---

[HDC]
( 참고 : https://octagonal-colt-882.notion.site/23-05-21_-6e9090c1e43e404f82fe689c58dc84bb )
커널오브젝트중 하나
int 형 변수 하나를 멤버로 가지고 있는 4Byte 크기의 구조체

---

[커널 오브젝트]
*커널 오브젝트? : OS가 관리하는 오브젝트?
윈도우 프로그래밍을 하다보면 대부분이 커널 오브젝트인 경우가 많다.
커널 오브젝트를 다루는데 익숙해져야한다.

---

[Device Context(DC)]
장치 컨텍스트란 무엇인가?
그리기동작(Rendering)을 할 수 있게 그리기 작업을 수행하는데 필요한 데이터들의 집합체
윈도우에 무엇인가 그리고자 한다면 항상 DC를 통해서 그려줘야한다.
"DC를 가져와 그림을 그린다"의 의미 : 
    해당 DC가 목적지로 하고 있는 그림판(윈도우)에 DC안에 들어있는 
    PEN정보 또는 BRUSH정보로 그림을 그리겠다는 의미
PEN, BRUSH의 기본 값
    - PEN : Black
    - BRUSH : White

---

[Pixel]
픽셀한칸은 RGB 3가지 컬러값을 가지고 있으므로 한 칸당 3Byte 크기를 가지고 있다.
RGB 000000 = White
RGB FFFFFF = Black
RGB의 색상 조합 : 16,777,216 가지 (1600만 화소)

---